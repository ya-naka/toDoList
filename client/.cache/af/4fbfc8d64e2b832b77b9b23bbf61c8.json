{"id":"node_modules/cadence/index.js","dependencies":[{"name":"C:\\wamp64\\www\\ProjetTuteure\\client\\package.json","includedInParent":true,"mtime":1617550394413},{"name":"C:\\wamp64\\www\\ProjetTuteure\\client\\node_modules\\cadence\\package.json","includedInParent":true,"mtime":1617550394368}],"generated":{"js":"var __slice = [].slice;\n/*\nfunction die () {\n  console.log.apply(console, __slice.call(arguments, 0));\n  process.exit(1);\n}\n\nfunction say () { console.log.apply(console, __slice.call(arguments, 0)) }\n*/\nfunction cadence () {\n  var steps = __slice.call(arguments, 0);\n\n  function begin (steps, vargs, callback) {\n    var invocation = {\n      callbacks: [{ results: [[invoke].concat(vargs)] }]\n    };\n    invoke.call(this, steps, 0, invocation, callback);\n  }\n\n  // Execute is the function returned to the user. It represents the constructed\n  // cadence. When the user invokes it with no arguments, a default error\n  // throwing callback is used for the cadence callback. If the user provides\n  // any arguments, the user must also provide a callback.\n  function execute () {\n    var vargs = __slice.call(arguments, 0),\n        callback = function (error) { if (error) throw error };\n    if (vargs.length) callback = vargs.pop();\n    begin.call(this, steps, [async].concat(vargs), callback);\n  }\n\n  // To use the same `step` function throughout while supporting reentrancy,\n  // we keep a stack of invocation objects. The stack is reversed; top is 0.\n  // The `step` function is synchronous and will return immediately.\n  //\n  // It is possible for the user to invoke `step` outside of a step in a\n  // cadence, we can't prevent it, nor really even detect it. Imagine the user\n  // invoking `setTimeout` with a callback that calls `step` five minutes\n  // later, long after the cadence has ended. Mayhem, but what can you do?\n  var invocations = [];\n\n  // We give this function to the caller to build control flow. In the\n  // debugger, I often want to step into a function that takes a step\n  // callback, so I'm often stepping into this function, only to step right\n  // back out again. Step out is a two finger chord in the Chrome debugger,\n  // but step over is a single function key, so I want to have the option to\n  // step over the body of this function, instead of having to find the\n  // control key when I'm in it. That is the only reason for the separate\n  // async function.\n\n  //\n  function async () { return _async.apply(null, arguments) }\n\n  function _async() {\n    var vargs = __slice.call(arguments, 0), i = -1, step, original;\n\n    // The caller as invoked the async function directly as an explicit early\n    // return to exit the entire cadence.\n    if (vargs[0] === null || vargs[0] instanceof Error) {\n      invocations[0].count = Number.MAX_VALUE;\n      invocations[0].callback.apply(null, vargs);\n      return;\n    }\n\n    // If our first argument is a function, we check to see if it is a jump\n    // instruction. If the function is a member of the current cadence, we\n    // will inovke that function with the results of this step.\n\n    // Search for the function in the current cadence.\n    if (vargs.length == 1 && typeof vargs[0] == \"function\") {\n      original = vargs[0].original || vargs[0];\n      for (i = invocations[0].args[0].length - 1; step = invocations[0].args[0][i]; i--) {\n        if (original === step || original === step.original) break;\n      }\n    }\n\n    // If we find the function in the current cadence, we set the index of\n    // next step function to execute; then remove the function argument and\n    // procede.\n    if (~i) {\n      invocations[0].args[1] = i;\n      vargs.shift();\n    }\n\n    var callback = { errors: [], results: [] };\n    invocations[0].callbacks.push(callback);\n\n    var fixup;\n    if (fixup = (vargs[0] === async)) {\n      vargs.shift();\n    }\n    if (!isNaN(parseInt(vargs[0], 10))) {\n      callback.arity = +(vargs.shift());\n    }\n    if (Array.isArray(vargs[0]) && vargs[0].length == 0) {\n      callback.arrayed = !! vargs.shift();\n    }\n    if (Error === vargs[0]) {\n      invocations[0].catchable = callback.catchable = !! vargs.shift();\n    }\n    callback.cadence = vargs;\n    if (vargs.length) {\n      if (!vargs.every(function (arg) { return typeof arg == \"function\" })) {\n        throw new Error(\"invalid arguments\");\n      }\n      if (!fixup) return createCadence(invocations[0], callback);\n    }\n    if (callback.arrayed) return createArray(invocations[0], callback);\n    return createCallback(invocations[0], callback, 0);\n  }\n\n  function createCadence (invocation, callback) {\n    var index = 0;\n    callback.run = ! callback.arrayed;\n    return function () {\n      var vargs = __slice.call(arguments);\n      runSubCadence(invocation, callback, index++, vargs);\n    }\n  }\n\n  function createArray (invocation, callback) {\n    var index = 0;\n    return function () {\n      var vargs = __slice.call(arguments);\n      if (index < 0) throw new Error(\"zero-to-many already determined\");\n      if (Array.isArray(vargs[0])) {\n        index = -2;\n      }\n      return createCallback(invocation, callback, index++);\n    }\n  }\n\n  function createCallback (invocation, callback, index) {\n    if (-1 < index) invocation.count++;\n    return function (error) {\n      var vargs = __slice.call(arguments, 1);\n      if (error) {\n        thrown(invocation, error, callback);\n      } else {\n        if (index < 0) callback.results.push(vargs);\n        else callback.results[index] = vargs;\n        if (callback.cadence.length) {\n          invocation.count++;\n          begin.call(invocation.self, callback.cadence, callback.results[index], function (error, result) {\n            if (error) {\n              thrown(invocation, error);\n            } else {\n              callback.results[index] = __slice.call(arguments, 1);\n            }\n            if (-1 < index && ++invocation.called == invocation.count) {\n              invoke.apply(invocation.self, invocation.args);\n            }\n          });\n        }\n        // Indicates that the function has completed, so we need create\n        // the callbacks for parallel cadences now, the next increment of\n        // the called counter, which may be the last.\n        if (vargs[0] == invoke) {\n          invocation.callbacks.filter(function (callback) { return callback.run }).forEach(function (callback) {\n            runSubCadence(invocation, callback, 0, []);\n          });\n        }\n      }\n      if (index > -1 && ++invocation.called == invocation.count) {\n        invoke.apply(invocation.self, invocation.args);\n      }\n    }\n  }\n\n  function runSubCadence (invocation, callback, index, vargs) {\n    delete callback.run;\n    var steps = callback.cadence;\n    invocation.count++;\n    begin.call(invocation.self, steps, vargs, function (error) {\n      var vargs = __slice.call(arguments, 1);\n      if (error) {\n        thrown(invocation, error);\n      } else {\n        callback.results[index] = vargs;\n      }\n      if (++invocation.called == invocation.count) {\n        invoke.apply(invocation.self, invocation.args);\n      }\n    });\n  }\n\n  function thrown (invocation, error, callback) {\n    var steps = invocation.args[0], next = steps[invocation.index + 1];\n    if (next && callback.catchable) {\n      callback.errors = [ error ];\n    } else {\n      invocation.abended = true;\n      invocation.callback(error);\n    }\n  }\n\n  // Parallel arrays make the most sense, really. If the paralleled function\n  // is better off returning a map, it can be shimmed.\n  function contextualize (step, callbacks) {\n    var index, vargs = [], arg, callback, arity;\n\n    arg = 0;\n    while (callbacks.length) {\n      callback = callbacks.shift();\n      if (callback.arrayed) {\n        callback.results = callback.results.filter(function (vargs) { return vargs.length });\n      }\n      if ('arity' in callback) {\n        arity = callback.arity;\n      } else {\n        arity = callback.arrayed ? 1 : 0;\n        callback.results.forEach(function (result) {\n          arity = Math.max(arity, result.length);\n        });\n      }\n      for (index = 0; index < arity; index++) {\n        vargs.push({ values: [],\n                     arrayed: ('arrayed' in callback) ? callback.arrayed : callback.results.length > 1 });\n      }\n      callback.results.forEach(function (result) {\n        for (var i = 0; i < arity; i++) {\n          vargs[arg + i].values.push(result[i]);\n        }\n      });\n      arg += arity;\n    }\n\n    return vargs.map(function (vargs) { return vargs.arrayed ? vargs.values : vargs.values.shift() });\n  }\n\n  function invoke (steps, index, previous, callback) {\n    var callbacks = previous.callbacks, args = [], arg, step, result, hold;\n\n    if (previous.thrown) {\n      callback(previous.thrown);\n      return;\n    }\n    if (previous.abended) return;\n\n\n    var caught = [];\n    if (previous.catchable) {\n      var caught = callbacks.filter(function (callback) { return callback.errors.length });\n    }\n\n    if (steps[index] && previous.catchable && !caught.length) {\n      previous.catchable = false;\n      invoke.call(this, steps, index + 1, previous, callback);\n    } else {\n      // No callbacks means that we use the function return value, if any.\n      if (callbacks.length == 1) {\n        callbacks[0].results[0].shift()\n        if (!callbacks[0].results[0].length) {\n          callbacks.shift();\n        }\n      } else {\n        callbacks.shift();\n      }\n\n      // Filter out the return value, if there are callbacks left, then\n      // `contextualize` will process them.\n      if (caught.length) {\n        args = callbacks.filter(function (callback) {\n          return callback.catchable;\n        }).map(function (callback) {\n          return callback.errors.shift();\n        });\n      } else {\n        if (callbacks.length) {\n          args = contextualize(step, callbacks);\n        } else {\n          args = [];\n        }\n      }\n\n      if (steps.length == index) {\n        callback.apply(null, [ null ].concat(args));\n        return;\n      }\n\n      // Get the next step.\n      step = steps[index];\n\n      invocations.unshift({ callbacks: [], count: 0 , called: 0, index: index,\n                            callback: callback, self: this });\n      invocations[0].args = [ steps, index + 1, invocations[0], callback ]\n\n      hold = async();\n      try {\n        result = step.apply(this, args);\n      } catch (error) {\n        // We're not a replacement for try/catch, so set up the next step for\n        // failure, ensure that our hold function invokes the next step.\n        invocations[0].thrown = error;\n        invocations[0].called = invocations[0].count - 1;\n      }\n      invocations.shift();\n      hold.apply(this, [ null, invoke ].concat(result === void(0) ? [] : [ result ]));\n    }\n  }\n\n  return execute;\n}\n\nmodule.exports = cadence;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/cadence/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/cadence/index.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}}],"sources":{"node_modules/cadence/index.js":"var __slice = [].slice;\n/*\nfunction die () {\n  console.log.apply(console, __slice.call(arguments, 0));\n  process.exit(1);\n}\n\nfunction say () { console.log.apply(console, __slice.call(arguments, 0)) }\n*/\nfunction cadence () {\n  var steps = __slice.call(arguments, 0);\n\n  function begin (steps, vargs, callback) {\n    var invocation = {\n      callbacks: [{ results: [[invoke].concat(vargs)] }]\n    };\n    invoke.call(this, steps, 0, invocation, callback);\n  }\n\n  // Execute is the function returned to the user. It represents the constructed\n  // cadence. When the user invokes it with no arguments, a default error\n  // throwing callback is used for the cadence callback. If the user provides\n  // any arguments, the user must also provide a callback.\n  function execute () {\n    var vargs = __slice.call(arguments, 0),\n        callback = function (error) { if (error) throw error };\n    if (vargs.length) callback = vargs.pop();\n    begin.call(this, steps, [async].concat(vargs), callback);\n  }\n\n  // To use the same `step` function throughout while supporting reentrancy,\n  // we keep a stack of invocation objects. The stack is reversed; top is 0.\n  // The `step` function is synchronous and will return immediately.\n  //\n  // It is possible for the user to invoke `step` outside of a step in a\n  // cadence, we can't prevent it, nor really even detect it. Imagine the user\n  // invoking `setTimeout` with a callback that calls `step` five minutes\n  // later, long after the cadence has ended. Mayhem, but what can you do?\n  var invocations = [];\n\n  // We give this function to the caller to build control flow. In the\n  // debugger, I often want to step into a function that takes a step\n  // callback, so I'm often stepping into this function, only to step right\n  // back out again. Step out is a two finger chord in the Chrome debugger,\n  // but step over is a single function key, so I want to have the option to\n  // step over the body of this function, instead of having to find the\n  // control key when I'm in it. That is the only reason for the separate\n  // async function.\n\n  //\n  function async () { return _async.apply(null, arguments) }\n\n  function _async() {\n    var vargs = __slice.call(arguments, 0), i = -1, step, original;\n\n    // The caller as invoked the async function directly as an explicit early\n    // return to exit the entire cadence.\n    if (vargs[0] === null || vargs[0] instanceof Error) {\n      invocations[0].count = Number.MAX_VALUE;\n      invocations[0].callback.apply(null, vargs);\n      return;\n    }\n\n    // If our first argument is a function, we check to see if it is a jump\n    // instruction. If the function is a member of the current cadence, we\n    // will inovke that function with the results of this step.\n\n    // Search for the function in the current cadence.\n    if (vargs.length == 1 && typeof vargs[0] == \"function\") {\n      original = vargs[0].original || vargs[0];\n      for (i = invocations[0].args[0].length - 1; step = invocations[0].args[0][i]; i--) {\n        if (original === step || original === step.original) break;\n      }\n    }\n\n    // If we find the function in the current cadence, we set the index of\n    // next step function to execute; then remove the function argument and\n    // procede.\n    if (~i) {\n      invocations[0].args[1] = i;\n      vargs.shift();\n    }\n\n    var callback = { errors: [], results: [] };\n    invocations[0].callbacks.push(callback);\n\n    var fixup;\n    if (fixup = (vargs[0] === async)) {\n      vargs.shift();\n    }\n    if (!isNaN(parseInt(vargs[0], 10))) {\n      callback.arity = +(vargs.shift());\n    }\n    if (Array.isArray(vargs[0]) && vargs[0].length == 0) {\n      callback.arrayed = !! vargs.shift();\n    }\n    if (Error === vargs[0]) {\n      invocations[0].catchable = callback.catchable = !! vargs.shift();\n    }\n    callback.cadence = vargs;\n    if (vargs.length) {\n      if (!vargs.every(function (arg) { return typeof arg == \"function\" })) {\n        throw new Error(\"invalid arguments\");\n      }\n      if (!fixup) return createCadence(invocations[0], callback);\n    }\n    if (callback.arrayed) return createArray(invocations[0], callback);\n    return createCallback(invocations[0], callback, 0);\n  }\n\n  function createCadence (invocation, callback) {\n    var index = 0;\n    callback.run = ! callback.arrayed;\n    return function () {\n      var vargs = __slice.call(arguments);\n      runSubCadence(invocation, callback, index++, vargs);\n    }\n  }\n\n  function createArray (invocation, callback) {\n    var index = 0;\n    return function () {\n      var vargs = __slice.call(arguments);\n      if (index < 0) throw new Error(\"zero-to-many already determined\");\n      if (Array.isArray(vargs[0])) {\n        index = -2;\n      }\n      return createCallback(invocation, callback, index++);\n    }\n  }\n\n  function createCallback (invocation, callback, index) {\n    if (-1 < index) invocation.count++;\n    return function (error) {\n      var vargs = __slice.call(arguments, 1);\n      if (error) {\n        thrown(invocation, error, callback);\n      } else {\n        if (index < 0) callback.results.push(vargs);\n        else callback.results[index] = vargs;\n        if (callback.cadence.length) {\n          invocation.count++;\n          begin.call(invocation.self, callback.cadence, callback.results[index], function (error, result) {\n            if (error) {\n              thrown(invocation, error);\n            } else {\n              callback.results[index] = __slice.call(arguments, 1);\n            }\n            if (-1 < index && ++invocation.called == invocation.count) {\n              invoke.apply(invocation.self, invocation.args);\n            }\n          });\n        }\n        // Indicates that the function has completed, so we need create\n        // the callbacks for parallel cadences now, the next increment of\n        // the called counter, which may be the last.\n        if (vargs[0] == invoke) {\n          invocation.callbacks.filter(function (callback) { return callback.run }).forEach(function (callback) {\n            runSubCadence(invocation, callback, 0, []);\n          });\n        }\n      }\n      if (index > -1 && ++invocation.called == invocation.count) {\n        invoke.apply(invocation.self, invocation.args);\n      }\n    }\n  }\n\n  function runSubCadence (invocation, callback, index, vargs) {\n    delete callback.run;\n    var steps = callback.cadence;\n    invocation.count++;\n    begin.call(invocation.self, steps, vargs, function (error) {\n      var vargs = __slice.call(arguments, 1);\n      if (error) {\n        thrown(invocation, error);\n      } else {\n        callback.results[index] = vargs;\n      }\n      if (++invocation.called == invocation.count) {\n        invoke.apply(invocation.self, invocation.args);\n      }\n    });\n  }\n\n  function thrown (invocation, error, callback) {\n    var steps = invocation.args[0], next = steps[invocation.index + 1];\n    if (next && callback.catchable) {\n      callback.errors = [ error ];\n    } else {\n      invocation.abended = true;\n      invocation.callback(error);\n    }\n  }\n\n  // Parallel arrays make the most sense, really. If the paralleled function\n  // is better off returning a map, it can be shimmed.\n  function contextualize (step, callbacks) {\n    var index, vargs = [], arg, callback, arity;\n\n    arg = 0;\n    while (callbacks.length) {\n      callback = callbacks.shift();\n      if (callback.arrayed) {\n        callback.results = callback.results.filter(function (vargs) { return vargs.length });\n      }\n      if ('arity' in callback) {\n        arity = callback.arity;\n      } else {\n        arity = callback.arrayed ? 1 : 0;\n        callback.results.forEach(function (result) {\n          arity = Math.max(arity, result.length);\n        });\n      }\n      for (index = 0; index < arity; index++) {\n        vargs.push({ values: [],\n                     arrayed: ('arrayed' in callback) ? callback.arrayed : callback.results.length > 1 });\n      }\n      callback.results.forEach(function (result) {\n        for (var i = 0; i < arity; i++) {\n          vargs[arg + i].values.push(result[i]);\n        }\n      });\n      arg += arity;\n    }\n\n    return vargs.map(function (vargs) { return vargs.arrayed ? vargs.values : vargs.values.shift() });\n  }\n\n  function invoke (steps, index, previous, callback) {\n    var callbacks = previous.callbacks, args = [], arg, step, result, hold;\n\n    if (previous.thrown) {\n      callback(previous.thrown);\n      return;\n    }\n    if (previous.abended) return;\n\n\n    var caught = [];\n    if (previous.catchable) {\n      var caught = callbacks.filter(function (callback) { return callback.errors.length });\n    }\n\n    if (steps[index] && previous.catchable && !caught.length) {\n      previous.catchable = false;\n      invoke.call(this, steps, index + 1, previous, callback);\n    } else {\n      // No callbacks means that we use the function return value, if any.\n      if (callbacks.length == 1) {\n        callbacks[0].results[0].shift()\n        if (!callbacks[0].results[0].length) {\n          callbacks.shift();\n        }\n      } else {\n        callbacks.shift();\n      }\n\n      // Filter out the return value, if there are callbacks left, then\n      // `contextualize` will process them.\n      if (caught.length) {\n        args = callbacks.filter(function (callback) {\n          return callback.catchable;\n        }).map(function (callback) {\n          return callback.errors.shift();\n        });\n      } else {\n        if (callbacks.length) {\n          args = contextualize(step, callbacks);\n        } else {\n          args = [];\n        }\n      }\n\n      if (steps.length == index) {\n        callback.apply(null, [ null ].concat(args));\n        return;\n      }\n\n      // Get the next step.\n      step = steps[index];\n\n      invocations.unshift({ callbacks: [], count: 0 , called: 0, index: index,\n                            callback: callback, self: this });\n      invocations[0].args = [ steps, index + 1, invocations[0], callback ]\n\n      hold = async();\n      try {\n        result = step.apply(this, args);\n      } catch (error) {\n        // We're not a replacement for try/catch, so set up the next step for\n        // failure, ensure that our hold function invokes the next step.\n        invocations[0].thrown = error;\n        invocations[0].called = invocations[0].count - 1;\n      }\n      invocations.shift();\n      hold.apply(this, [ null, invoke ].concat(result === void(0) ? [] : [ result ]));\n    }\n  }\n\n  return execute;\n}\n\nmodule.exports = cadence;\n"},"lineCount":305}},"error":null,"hash":"362282640f85e1a1d0ad45b472e19b57","cacheData":{"env":{}}}