DROP TABLE Users;
DROP TABLE List;
DROP TABLE Task;
DROP TABLE Step;

CREATE TABLE Users(
IdUser INTEGER AUTO_INCREMENT PRIMARY KEY,
Email VARCHAR(50) NOT NULL,
Password VARCHAR(60) NOT NULL,
CreationDate date DEFAULT sysdate() NOT NULL,
ModifyDate DATE,
DeleteDate DATE
);

CREATE TABLE List(
IdList INTEGER AUTO_INCREMENT PRIMARY KEY,
userId INTEGER NOT NULL,
Title VARCHAR(30) NOT NULL,
Description VARCHAR(300),
CreationDate DATE DEFAULT Sysdate() NOT NULL,
ModifyDate DATE,
DeleteDate DATE
);


CREATE TABLE Task(
IdTask INTEGER AUTO_INCREMENT PRIMARY KEY,
ListId INTEGER NOT NULL,
Title VARCHAR(30) NOT NULL,
Description VARCHAR(300),
CheckTask BOOLEAN DEFAULT 0 NOT NULL,
Deadline DATE NOT NULL, 
CreationDate DATE DEFAULT Sysdate() NOT NULL,
ModifyDate DATE,
DeleteDate DATE
);


CREATE TABLE Step(
IdStep INTEGER AUTO_INCREMENT PRIMARY KEY,
TaskId INTEGER NOT NULL,
Title VARCHAR(30)NOT NULL,
Description VARCHAR(300),
checkStep BOOLEAN DEFAULT 0 NOT NULL,
CreationDate DATE DEFAULT Sysdate() NOT NULL,
ModifyDate DATE,
DeleteDate DATE
);

ALTER TABLE Users ENGINE InnoDB;
ALTER TABLE List ENGINE InnoDB;
ALTER TABLE Task ENGINE InnoDB;
ALTER TABLE Step ENGINE InnoDB;
ALTER TABLE Users ADD CONSTRAINT UNIQUE_Email UNIQUE(Email);
ALTER TABLE List ADD CONSTRAINT FK_Users_List FOREIGN KEY (userId) REFERENCES USERS(IdUser);
ALTER TABLE Task ADD CONSTRAINT FK_Task_List FOREIGN KEY (ListId) REFERENCES LIST(IdList);
ALTER TABLE Task ADD CONSTRAINT CK_Dealine CHECK (deadline>=CreationDate);
ALTER TABLE Step ADD CONSTRAINT FK_Step_Task FOREIGN KEY (TaskId) REFERENCES Task(IdTask);


DELIMITER |


/*Insert*/
CREATE or replace PROCEDURE InsertUser(PEmail Varchar(50), PPassword Varchar(60)) 
BEGIN 
Insert Into Users(Email, Password) Values (PEmail, PPassword); 
END |

CREATE or replace PROCEDURE InsertList(PUserId INTEGER, PTitle Varchar(30), PDescription Varchar(300)) 
BEGIN 
Insert Into List(userId, Title, Description) Values (PuserId, PTitle, PDescription); 
END |

CREATE or replace PROCEDURE InsertTask(PListId INTEGER, PTitle Varchar(30), PDescription Varchar(300), PDeadline date) 
BEGIN 
Insert Into Task(ListId, Title, Description, Deadline) Values (PListId, PTitle, PDescription, PDeadline); 
END |

CREATE or replace PROCEDURE InsertStep(PTaskId INTEGER, PTitle Varchar(30), PDescription Varchar(300)) 
BEGIN 
Insert Into Step(TaskId, Title, Description) Values (PTaskId, PTitle, PDescription); 
END |


/*setters*/

	/*USERS*/
	CREATE or replace PROCEDURE SetEmail(PEmailOld varchar(50), PEmailNew varchar(50))
	BEGIN
		update Users set Email = PEmailNew where email=PEmailOld;
	END |

	CREATE or replace PROCEDURE SetPassword(PIdUser varchar(50), PPwdNew varchar(60))
	BEGIN
		update Users set Password = PPwdNew where IdUser=PIdUser;
		update Users set ModifyDate = sysdate();
	END |

	/*LIST*/
	CREATE or replace PROCEDURE setTitleList(PUserId INTEGER, PIdList INTEGER, PTitleNew Varchar(30))
	BEGIN
		update List set Title = PTitleNew where userId = PUserId and idList = PIdList;
		update List set ModifyDate = sysdate();
	END |

	CREATE or replace PROCEDURE setDescriptionList(PUserId INTEGER, PIdList INTEGER, PDescription varchar(300))
	BEGIN
		update List set Description = PDescription where userId = PUserId and idList = PIdList;
		update List set ModifyDate = sysdate();
	END |



	/*TASK*/
	CREATE or replace PROCEDURE SetCheckTask(PIdTask INTEGER, PValue Integer) 
	BEGIN 
		update Task set CheckTask=PValue where IdTask=PIdTask;
		IF (PVALUE=1) THEN
		update Task set ModifyDate=sysdate() Where IdTask=PIdTask;
		ELSE
			update Task set ModifyDate=NULL Where IdTask=PIdTask;
		END IF;
	END |

	CREATE or replace PROCEDURE setTitleTask(PIdTask INTEGER, PTitleNew Varchar(30))
	BEGIN
		update Task set Title = PTitleNew where IdTask = PIdTask;
	END |

	CREATE or replace PROCEDURE setDescriptionTask(PIdTask INTEGER, PDescription Varchar(300))
	BEGIN
		update Task set Description = PDescription where  IdTask = PIdTask;
	END |

	CREATE or replace PROCEDURE setDeadlineTask(PIdTask INTEGER, PNewDate Date)
	BEGIN
		update Task set Deadline = PNewDate where  IdTask = PIdTask;
	END |


	/*STEP*/
	CREATE or replace PROCEDURE SetCheckStep(PIdStep INTEGER, PValue Integer) 
	BEGIN 
		update Step set CheckStep=PValue where IdStep=PIdStep;
		IF(PValue=1)THEN
		update Step set ModifyDate=sysdate() Where IdStep=PIdStep;
		ELSE
		update Step set ModifyDate=NULL Where IdStep=PIdStep;
		END IF;
	END |

	CREATE or replace PROCEDURE setTitleStep(PIdStep INTEGER, PTitleNew Varchar(30))
	BEGIN
		update Step set Title = PTitleNew where IdStep = PIdStep;
	END |

	CREATE or replace PROCEDURE setDescriptionStep(PIdStep INTEGER, PDescription Varchar(300))
	BEGIN
		update Step set Description = PDescription where  IdStep = PIdStep;
	END |




/*getters*/

CREATE or replace FUNCTION getUserId(PEmail VARCHAR(50)) RETURNS INTEGER 
BEGIN DECLARE V_id Integer; 
	Select idUser INTO V_id from Users where Email=PEmail; 
RETURN V_id; 
END |

CREATE or replace FUNCTION getListId(PUserId integer, PTitleList VARCHAR(30)) RETURNS INTEGER 
BEGIN DECLARE V_id Integer; 
	Select idList INTO V_id from List where Title=PTitleList and userId=PUserid; 
RETURN V_id; 
END |

CREATE or replace FUNCTION getTaskId(PListId Integer, PTitleTask VARCHAR(30)) RETURNS INTEGER 
BEGIN DECLARE V_id Integer; 
	Select idTask INTO V_id from Task where Title=PTitleTask and PListId=listId;
RETURN V_id; 
END |

CREATE or replace FUNCTION getStepId(PTaskId integer, PTitleStep VARCHAR(30)) RETURNS INTEGER 
BEGIN DECLARE V_id Integer; 
	Select idStep INTO V_id from Step where Title=PTitleStep and TaskId=PTaskId;
RETURN V_id; 
END |

CREATE or replace FUNCTION getNbOfTask(PListId Integer) RETURNS INTEGER 
BEGIN DECLARE V_Nb Integer; 
	Select Count(idTask) INTO V_Nb 
	from Task  
	where ListId=PListId;
RETURN V_Nb; 
END |

CREATE or replace FUNCTION getNbOfStep(PTaskId integer) RETURNS INTEGER 
BEGIN DECLARE V_Nb Integer; 
	Select Count(idStep) INTO V_Nb 
	from Step  
	where TaskId=PTaskId;
RETURN V_Nb;
END |

CREATE or replace FUNCTION getNbOfStepValid(PTaskId integer) RETURNS INTEGER 
BEGIN DECLARE V_Nb Integer; 
	Select Count(idStep) INTO V_Nb 
	from Step  
	where TaskId=PTaskId
	and checkStep = 1;
RETURN V_Nb;
END |

CREATE or replace FUNCTION getDateOfList(PIdList VARCHAR(30)) RETURNS DATE 
BEGIN DECLARE V_Date DATE; 
	Select CreationDate INTO V_Date 
	from List
	where idList=PIdList;
RETURN V_Date; 
END |

CREATE or replace FUNCTION getPassword(PEmail VARCHAR(50)) RETURNS VARCHAR(60) 
BEGIN DECLARE V_Pwd VARCHAR(60); 
	Select Password INTO V_Pwd from Users where email=PEmail;
RETURN V_Pwd; 
END |


/*DELETE*/

CREATE or replace PROCEDURE deleteUser(PIdUser INTEGER)
BEGIN
	Delete From Users where IdUser=PIdUser;
END |














DELIMITER ;


/*LIST_DATA*/
DELIMITER $$
CREATE or replace FUNCTION getLists(PuserId INTEGER) RETURNS VARCHAR(4000)
BEGIN
    DECLARE finished INTEGER DEFAULT 0;
	DECLARE V_Liste VARCHAR(4000);
    DECLARE V_Title VARCHAR(300) DEFAULT '';
	
    DECLARE C_Liste 
		CURSOR FOR 
			Select Title from List where userId = PuserId order by CreationDate DESC; 
			
    DECLARE CONTINUE HANDLER
    FOR NOT FOUND SET finished = 1;
    OPEN C_Liste;
        getList:LOOP
            FETCH C_Liste INTO V_title;
            IF finished = 1 THEN 
                LEAVE getList;
            END IF;
            SET V_Liste = CONCAT_WS('#',V_Liste, V_title);
		END LOOP getList;
    CLOSE C_Liste;
	
RETURN V_Liste; 
END $$
DELIMITER ;