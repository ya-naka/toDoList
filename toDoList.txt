DROP TABLE Users;
DROP TABLE List;
DROP TABLE Task;
DROP TABLE Step;

CREATE TABLE Users(
IdUser INTEGER AUTO_INCREMENT PRIMARY KEY,
FirstName VARCHAR(30) NOT NULL,
LastName VARCHAR(30) NOT NULL,
Email VARCHAR(50) NOT NULL,
Password VARCHAR(20) NOT NULL,
CreationDate date DEFAULT sysdate() NOT NULL,
ModifyDate DATE,
DeleteDate DATE
);

CREATE TABLE List(
IdList INTEGER AUTO_INCREMENT PRIMARY KEY,
userId INTEGER NOT NULL,
Title VARCHAR(30) NOT NULL,
Description VARCHAR(300),
CreationDate DATE DEFAULT Sysdate() NOT NULL,
ModifyDate DATE,
DeleteDate DATE
);

CREATE TABLE Task(
IdTask INTEGER AUTO_INCREMENT PRIMARY KEY,
ListId INTEGER NOT NULL,
Title VARCHAR(30) NOT NULL,
Description VARCHAR(300),
CheckTask BOOLEAN DEFAULT 0 NOT NULL,
Deadline DATE NOT NULL, 
CreationDate DATE DEFAULT Sysdate() NOT NULL,
ModifyDate DATE,
DeleteDate DATE
);


CREATE TABLE Step(
IdStep INTEGER AUTO_INCREMENT PRIMARY KEY,
TaskId INTEGER NOT NULL,
Title VARCHAR(30)NOT NULL,
Description VARCHAR(300),
checkStep BOOLEAN DEFAULT 0 NOT NULL,
CreationDate DATE DEFAULT Sysdate() NOT NULL,
ModifyDate DATE,
DeleteDate DATE
);

ALTER TABLE Users ADD CONSTRAINT UNIQUE_Email UNIQUE(Email);
ALTER TABLE List ADD CONSTRAINT FK_Users_List FOREIGN KEY (userId) REFERENCES USERS(IdUser);
ALTER TABLE List ADD CONSTRAINT UNIQUE_Title UNIQUE (Title);
ALTER TABLE Task ADD CONSTRAINT FK_Task_List FOREIGN KEY (ListId) REFERENCES LIST(IdList);
ALTER TABLE Task ADD CONSTRAINT UNIQUE_Title UNIQUE (Title);
ALTER TABLE Step ADD CONSTRAINT FK_Step_Task FOREIGN KEY (TaskId) REFERENCES Task(IdTask);
ALTER TABLE Step ADD CONSTRAINT UNIQUE_Title UNIQUE (Title);


DELIMITER |
CREATE or replace PROCEDURE InsertUser(FirstName Varchar(30), LastName Varchar(30), Email Varchar(50), Password Varchar(20)) 
BEGIN 
Insert Into Users(FirstName, LastName, Email, Password) Values (FirstName, LastName, Email, Password); 
END |

CREATE or replace PROCEDURE InsertList(userId INTEGER, Title Varchar(30), Description Varchar(300)) 
BEGIN 
Insert Into List(userId, Title, Description) Values (userId, Title, Description); 
END |

CREATE or replace PROCEDURE InsertTask(ListId INTEGER, Title Varchar(30), Description Varchar(300), deadline date) 
BEGIN 
Insert Into Task(ListId, Title, Description, Deadline) Values (ListId, Title, Description, deadline); 
END |

CREATE or replace PROCEDURE InsertStep(TaskId INTEGER, Title Varchar(30), Description Varchar(300)) 
BEGIN 
Insert Into Step(TaskId, Title, Description) Values (TaskId, Title, Description); 
END |

CREATE or replace PROCEDURE CheckTask(PIdTask INTEGER) 
BEGIN 
	update Task set CheckTask=1 where IdTask=PIdTask;
END |

CREATE or replace PROCEDURE NotCheckTask(PIdTask INTEGER) 
BEGIN 
	update Task set CheckTask=0 where IdTask=PIdTask;
END |

CREATE or replace PROCEDURE CheckStep(PIdTask INTEGER) 
BEGIN 
	update Step set CheckStep=1 where IdStep=PIdTask;
END |

CREATE or replace PROCEDURE NotCheckStep(PIdStep INTEGER) 
BEGIN 
	update Step set CheckStep=0 where IdStep=PIdStep;
END |

CREATE or replace PROCEDURE NotCheckStep(PIdStep INTEGER) 
BEGIN 
	update Step set CheckStep=0 where IdStep=PIdStep;
END |

CREATE or replace FUNCTION getUserId(PEmail VARCHAR(50)) RETURNS INTEGER 
BEGIN DECLARE V_id Integer; 
	Select idUser INTO V_id from Users where Email=PEmail; 
RETURN V_id; 
END |

CREATE or replace FUNCTION getListId(PTitle VARCHAR(30)) RETURNS INTEGER 
BEGIN DECLARE V_id Integer; 
	Select idList INTO V_id from List where Title=PTitle; 
RETURN V_id; 
END |

CREATE or replace FUNCTION getTaskId(PTitle VARCHAR(30)) RETURNS INTEGER 
BEGIN DECLARE V_id Integer; 
	Select idTask INTO V_id from Task where Title=PTitle;
RETURN V_id; 
END |

CREATE or replace FUNCTION getStepId(PTitle VARCHAR(30)) RETURNS INTEGER 
BEGIN DECLARE V_id Integer; 
	Select idStep INTO V_id from Step where Title=PTitle;
RETURN V_id; 
END |

CREATE or replace FUNCTION getNbOfTask(PTitle VARCHAR(30)) RETURNS INTEGER 
BEGIN DECLARE V_NbTask Integer; 
	Select Count(idList) INTO V_NbTask from List, Task  where  idlist=listid and List.Title=PTitle;
RETURN V_NbTask; 
END |

CREATE or replace FUNCTION getDateOfList(PTitle VARCHAR(30)) RETURNS DATE 
BEGIN DECLARE V_Date DATE; 
	Select CreationDate INTO V_Date from List where Title=PTitle;
RETURN V_Date; 
END |

DELIMITER ;


DELIMITER $$
CREATE or replace FUNCTION getList(PuserId INTEGER) RETURNS VARCHAR(4000)
BEGIN
    DECLARE finished INTEGER DEFAULT 0;
	DECLARE V_Liste VARCHAR(4000);
    DECLARE V_Title VARCHAR(300) DEFAULT '';
	
    DECLARE C_Liste 
		CURSOR FOR 
			Select Title from List where userId = PuserId order by CreationDate DESC; 
			
    DECLARE CONTINUE HANDLER
    FOR NOT FOUND SET finished = 1;
    OPEN C_Liste;
        getList:LOOP
            FETCH C_Liste INTO V_title;
            IF finished = 1 THEN 
                LEAVE getList;
            END IF;
            SET V_Liste = CONCAT_WS('#',V_Liste, V_title);
		END LOOP getList;
    CLOSE C_Liste;
	
RETURN V_Liste; 
END $$
DELIMITER ;